//~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`
/*
Преимущество этого скрипта: 
 - Позволяет отправить функцию в массивы столбцов и скомпилировать их или добавить их рядом 
 - Вы можете отправить столько параметров, сколько вам нужно 
 
Условия поиска: 
 - Добавить два столбца вместе / добавить один столбец к другому / объединить два столбца 
/ соединить два столбца / добавить один массив в другой массив / объединить массивы / объединить массив 
/ добавить массив в сторону другого массива / массива транспонирования 9  - Google App Script / GAS / javascript

+-------+-------+-----------+------+
| name  |  job  |   role    | num  |
+-------+-------+-----------+------+
| bob   | Sales | Primary   | 10.0 |
| sally | IT    | Primary   | -2.0 |
| john  | HR    | Secondary | 15.5 |
+-------+-------+-----------+------+

var name     = source_sheet.getRange("A:A").getValues();
// ["name","bob","sally","john"]
var job      = source_sheet.getRange("B:B").getValues();
// ["job","Sales","IT","HR"]
var num      = source_sheet.getRange("D:D").getValues();
// ["num",10.0,-2.0,15.5]


Usage:
  var copyArray = ColumnTransposer_(name,job,num);
  target_Sheet.getRange(1,1,copyArray.length, copyArray[0].length).setValues(copyArray);
*/

function ColumnTransposer_() 
  {
  var copyArray = [];  //СОздать пустой массив
  for (var i=0, iL=arguments[0].length; i<iL; i++)  //Циклы для первой длины аргумента
  {
    var copyArrayRow = []; // Создавать пустой массив каждый раз, когда цикл достигает этой точки
    for (var a in arguments)  // Перебирает каждый аргумент, отправленный в функцию
    {
      copyArrayRow.push(arguments[a][i].toString());  //Получить текущий аргумент и его индекс с уровня внешнего цикла
    }
    copyArray.push(copyArrayRow); // После того, как весь текущий индекс аргумента был добавлен в переменную copyArrayRow, он помещается как новая строка
  }
  return copyArray;  //Возвращает новый массив 2d.
}
//~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`~,~`
